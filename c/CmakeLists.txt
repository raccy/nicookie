cmake_minimum_required(VERSION 3.0)
project (nicookie)

set(NICOOKIE_MAJOR_VERSION 0)
set(NICOOKIE_MINOR_VERSION 1)
set(NICOOKIE_PATCH_VERSION 0)
set(NICOOKIE_VERSION ${NICOOKIE_MAJOR_VERSION}.${NICOOKIE_MINOR_VERSION}.${NICOOKIE_PATCH_VERSION})

if(NOT MSVC)
	set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -std=c11")
endif(NOT MSVC)

set(CMAKE_C_FLAGS_DEBUG "-DDEBUG=1")

set(nicookie_SOURCES
	nicookie_util.c
	nicookie_firefox.c
	nicookie_chrome.c
	nicookie.c)

if(WIN32)
	set(nicookie_platform_SOURCES
		nicookie_win_firefox.c
		nicookie_win.c)
elseif(APPLE)
	set(MACOSX_RPATH ON)
	set(nicookie_platform_SOURCES
		nicookie_osx_safari.c
		nicookie_osx_firefox.c
		nicookie_osx_chrome.c
		# nicookie_osx_opera.c
		nicookie_osx.c)
elseif(LINUX)
	set(nicookie_platform_SOURCES
		nicookie_lin_firefox.c
		nicookie_lin.c)
else()
	MESSAGE(FATAL_ERROR "This OS is not supported.")
endif()

include_directories(
  "${CMAKE_CURRENT_SOURCE_DIR}"
  "${CMAKE_CURRENT_BINARY_DIR}")

configure_file(${CMAKE_CURRENT_SOURCE_DIR}/nicookie_config.h.in
	${CMAKE_CURRENT_BINARY_DIR}/nicookie_config.h)

add_library(nicookie SHARED
	${nicookie_platform_SOURCES}
	${nicookie_SOURCES})

add_executable(getnicookie
	getnicookie.c)

target_link_libraries(nicookie
	sqlite3
	crypto)

target_link_libraries(getnicookie
	nicookie)
